generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  // Our custom model relation
  analyses ProfileAnalysis[]
  troubleshootingSessions TroubleshootingSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// Our existing custom model
model ProfileAnalysis {
  id          String   @id @default(cuid())
  profileText String
  result      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
  roadmap Roadmap?
}

model Roadmap {
  id        String   @id @default(cuid())
  phases    String // Store the generated roadmap phases as a JSON string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileAnalysis   ProfileAnalysis @relation(fields: [profileAnalysisId], references: [id])
  profileAnalysisId String          @unique // one-to-one relation

  resources Resource[]
}

model Resource {
  id            String   @id @default(cuid())
  milestoneText String
  title         String
  url           String
  type          String
  description   String
  createdAt     DateTime @default(now())

  roadmap   Roadmap @relation(fields: [roadmapId], references: [id])
  roadmapId String
}

model TroubleshootingSession {
  id            String   @id @default(cuid())
  milestoneText String
  createdAt     DateTime @default(now())
  
  user   User   @relation(fields: [userId], references: [id])
  userId String

  messages ChatMessage[]
}

model ChatMessage {
  id        String   @id @default(cuid())
  role      String // "user" or "model"
  content   String
  createdAt DateTime @default(now())

  session   TroubleshootingSession @relation(fields: [sessionId], references: [id])
  sessionId String
}